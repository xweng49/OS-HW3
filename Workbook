------------- WORKSHEET---------------------
1. This should be a paged segmentation which requires you to maintain two tables (page table and a segment table)


2. By default, one segment shall contain sl pages (in the input) and this applies to all the segments

3. Each process should maintain separate segment and page table, and the page fault handler has to be a separate process instead of the same process that raises the request.Fork at least k processes and parent process handles memory management and the k processes should be synchronized by the semaphore (the request should be served in the exact order) (the parent process runs the 6 page replacement algorithms) 
3a. The six algorithms can be run one after the other or make the user choose which one to run.

4. The requests are listed in the input 
101 0x0F  -> this indicates process 101 requests a segment with logical address 0x0F (in hex)
100 0x1A -> this indicates process 100 requests a segment with logical address 0x1A (in hex)

All requests are sequential

5. Usage of Data structures provided in the assignment is optional.

6. THE CONVERSION OF LOGICAL ADDRES TO PHYSICAL
-> Use segmentation and page table to convert logical to physical
-> Secondly, at the beginning two tables shall be blank, you should generate physical address for that 
-> To avoid duplicate use of physical address, usage of global date structure like (hash set) should serve the purpose

7. min and max are only restricted to the Working set Algorithm and they represent the min and max size of the window.

8. For the LRU-X replacement algorithm how should the replaced page be chosen if none of the current pages in the frame have an Xth least recently used page? Just by regular LRU? -> choose LRU

Also, for the OPT-X replacement algorithm does it look ahead X page references? Or does it look through the rest of the referenced pages to find the Xth reference to the page? -> It looks ahead X page references and if there are no references to the pages X references ahead, make it regular OPT-1 (X=1)


LIST OF THINGS TO BE SIMULATED:

1. When a request arrives, search the memory for the given page.
2. If a page is not found, report the page fault to stdout and then find the physical address of the page.
3. If the physical address doesn't exist generate one, which is unused.
4. Once the physical address is attained, simulate the I/O transfer from disk to memory.

OUTPUT EXPECTED FOR SAMPLE INPUT 

SAMPLE INPUT:
12
4
16
4
4
4
8
3
100 16
101 16
102 16
101 0x0F
100 0x1A
102 0x10
102 0xFF
100 0x20
100 0x6F
100 -1
101 -1
102 -1

SAMPLE OUTPUT ON FIFO:

100: 12
101: 4
102 :8
Total Page faults :24



